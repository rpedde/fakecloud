#!/bin/bash

function destroy_instance_disk() {
    # $1 - name
    #
    # this no-ops, as removing the instance dir
    # will remove most types of disks
    return 0
}

function get_instance_disk() {
    # $1 name
    local name=${1}

    _RETVAL="${BASE_DIR}/instance/${name}.disk"
}


# see if there is a disk image already of this size, if so
# qcow it, otherwise make a new one and qcow *that*
#
function make_bootable_drive() {
    # $1 - dist-release
    # $2 - size in Gb
    # $3 - name

    local distrelease=${1}
    local size=${2}
    local name=${3}

    log_debug "Making bootable drive"

    if [ ! -e ${BASE_DIR}/instances ]; then
        mkdir -p ${BASE_DIR}/instances
    fi

    mkdir -p "${BASE_DIR}/instances/${name}"

    if [ -e "${BASE_DIR}/instances/${name}/${name}.disk" ]; then
        log "Instance already exists... choose another name"
        trap deinit ERR EXIT
        exit 1
    fi

    expand_dist_to_sized_base ${distrelease} ${size}
    make_cow_from_sized_base ${distrelease} ${size} ${name}
}

function expand_dist_to_sized_base() {
    # $1 - dist-release
    # $2 - size in Gb

    if [ ! -e ${BASE_DIR}/base ]; then
        mkdir -p ${BASE_DIR}/base
    fi

    local distrelease=${1}
    local size=${2}
    local dist=${distrelease%%-*}
    local release=${distrelease##*-}
    local arch=amd64

    local basename=${distrelease}-${size}

    maybe_make_dist_image ${distrelease}

    if ( have_sized_base ${distrelease} ${size} ); then
        log_debug "Already have bootable sized base..."
        return 0
    fi

    log "Creating sized base for ${distrelease} (size: ${size}G)"
    # otherwise, make the sized base...
    # mountdir=$(mktemp -d)

    # trap "deinit; set +e; umount ${mountdir}; qemu-nbd -d $NBD_DEVICE; rm ${basepath}; rm -rf ${mountdir}; error_exit" SIGINT SIGTERM ERR

    # log_debug "Creating ${2}G copy of ${1}"
    # qemu-img create -f qcow2 -o preallocation=metadata ${basepath} ${2}G

    # log_debug "Copying base image"
    # modprobe nbd
    # qemu-nbd -c $NBD_DEVICE ${basepath}
    # sleep 5
    # mke2fs -j $NBD_DEVICE
    # mount $NBD_DEVICE ${mountdir}
    # tar -xvzf ${BASE_DIR}/minibase/${1}.tar.gz -C ${mountdir}
    # umount ${mountdir}
    # qemu-nbd -d $NBD_DEVICE

    # this is kinda hokey, but we'll make a full-disk image
    # strictly with loopback so we can avoid having to use
    # qemu-nbd

    working=$(mktemp -d)

    function expand_dist_to_sized_base_cleanup() {
        log_debug "cleaning up expand_dist_to_sized_base()"
        umount ${working}/mnt/dev
        umount ${working}/mnt/proc
        umount ${working}/mnt
        [ "${part_loop-}" != "" ] && losetup -d ${part_loop}
        [ "${base_loop-}" != "" ] && kpartx -d ${base_loop}
        [ "${base_loop-}" != "" ] && losetup -d ${base_loop}
        [ "${rawfile-}" != "" ] && destroy_raw_device ${rawfile}
        rm -rf ${working}
        echo ${working}
        return 1
    }

    trap 'expand_dist_to_sized_base_cleanup; return 1' SIGINT SIGTERM ERR

    log_debug "Creating raw image..."

    make_raw_device ${distrelease} ${size} ${name}
    local rawfile=$_RETVAL

    base_loop=$(losetup -vf ${rawfile} | awk '{ print $NF }')
    loop_basename=$(basename ${base_loop})
    log_debug "Partitioning..."
    parted ${base_loop} mklabel msdos mkpart primary 1m 100%
    kpartx -a ${base_loop}
    log_debug "Formatting..."

    local fstype=ext3

    case ${dist} in
        ubuntu)
            package=linux-image-generic
            grub_package="grub-pc"
            ;;
        debian)
            package=linux-image-${arch}
            grub_package="grub2 grub-common"
            ;;
        redhat|centos|fedora)
            package=kernel
            grub_package="grub2"
            fstype=ext4
            ;;
        *)
            echo "unknown dist"
            return 1
    esac

    mkfs.${fstype} -j /dev/mapper/${loop_basename}p1

    # reloop to make grub2 work
    part_loop=$(losetup -vf /dev/mapper/${loop_basename}p1 | awk '{ print $NF }')
    mkdir ${working}/mnt
    mount ${part_loop} ${working}/mnt

    # extract the debootstrap
    log_debug "Extracting..."
    tar -xvzf ${BASE_DIR}/minibase/${1}.tar.gz -C ${working}/mnt
    mkdir -p ${working}/mnt/boot


    # This is safe for everyone...
    if [ -e ${working}/mnt/etc/resolv.conf ]; then
        cp /etc/resolv.conf ${working}/mnt/etc/resolv.conf
    fi

    pre_grub ${dist} ${release} ${working}/mnt

    mount --bind /dev ${working}/mnt/dev
    mount --bind /proc ${working}/mnt/proc

    log_debug "Yet another apt-get update..."
    get_update_packagelist_command ${dist} ${release}
    chroot ${working}/mnt /bin/bash -c "${_RETVAL}"

    if [ "${EXTRA_PACKAGES-}" != "" ]; then
        packages=${EXTRA_PACKAGES//,/ }
        log_debug "Installing kernel and extra packages..."
        get_install_package_command ${dist} ${release} ${packages} ${package}
        chroot ${working}/mnt /bin/bash -c "${_RETVAL}"
    fi

    get_install_package_command ${dist} ${release} ${grub_package}
    chroot ${working}/mnt /bin/bash -c "${_RETVAL}"

    log_debug "Grubbing..."
    mkdir -p ${working}/mnt/boot/grub
    cat > ${working}/mnt/boot/grub/device.map <<EOF
(hd0) ${base_loop}
(hd0,1) ${part_loop}
EOF

    local mkconfig=/usr/sbin/grub-mkconfig
    local mkinstall=/usr/sbin/grub-install
    local grubdir=/boot/grub

    if [ ! -e ${working}/mnt/${mkconfig} ]; then
        mkconfig=/usr/sbin/grub2-mkconfig # fedora, others..
        grubdir=/boot/grub2
    fi

    if [ ! -e ${working}/mnt/${mkinstall} ]; then
        mkinstall=/usr/sbin/grub2-install # fedora, others..
    fi

    chroot ${working}/mnt ${mkconfig} -o ${grubdir}/grub.cfg

    # is this crazy? WARNING!
    if [[ "fedora-17 debian-wheezy" =~ "${dist}-${release}" ]]; then
        # this seems mildly dangerous, and possibly screwing up grub in the guest.  Seems to work.  ish.
        # if only grub2 didn't suck so badly.  maybe syslinux?

        # since we're grubbing from the external system, match up the grub stuff
        # with the exernal system's grub.
        if [ "${grubdir}" != /boot/grub ]; then
            cp ${working}/mnt/${grubdir}/grub.cfg ${working}/mnt/boot/grub/grub.cfg
            grubdir=/boot/grub
        fi

        if [ ! /usr/sbin/grub-probe --device-map=${working}/mnt/boot/grub/device.map --target=fs -v ${working}/mnt/boot/grub ]; then
            log "grub-probe failed... this might be bad"
        fi

        /usr/sbin/grub-install --no-floppy --grub-mkdevicemap=${working}/mnt/boot/grub/device.map --root-directory=${working}/mnt ${base_loop}

    else
        chroot ${working}/mnt ${mkinstall} --no-floppy --grub-mkdevicemap=/boot/grub/device.map --root-directory=/ ${base_loop}
    fi

    # turn off stupid quiet booting (ubuntu, fedora... I'm looking at you)
    if [ -e ${working}/mnt/${grubdir}/grub.cfg ]; then
        log_debug "Unfscking ubuntu-style boot options..."
        chmod 600 ${working}/mnt/${grubdir}/grub.cfg
        sed -i ${working}/mnt/${grubdir}/grub.cfg -e 's/quiet/nomodeset vga=0/'
        sed -i ${working}/mnt/${grubdir}/grub.cfg -e 's/rhgb//'
        # fedora wants to mount root fs read only... strange...
        sed -i ${working}/mnt/${grubdir}/grub.cfg -e 's/ ro / rw /'

        # grub seems to lately be aware of loopback devices.  We might do better just to completely rewrite the grub
        # config, but we'll keep munging it.
#       loopback loop1 /mapper/loop0p1
#       set root=(loop1)

        sed -i ${working}/mnt/${grubdir}/grub.cfg -e 's/^.*loopback.*$//'
        sed -i ${working}/mnt/${grubdir}/grub.cfg -e 's/^.*set root=(loop1).*$//'
    fi

    # turn off udev persistant stuff
    if [ -e ${working}/mnt/etc/udev/rules.d/70-persistent-net.rules ]; then
        rm ${working}/mnt/etc/udev/rules.d/70-persistent-net.rules
    fi

    post_grub ${dist} ${release} ${working}/mnt

    umount ${working}/mnt/dev
    umount ${working}/mnt/proc
    umount ${working}/mnt
    losetup -d ${part_loop}
    sleep 1
    kpartx -d ${base_loop}
    losetup -d ${base_loop}

    log "Finalizing sized base image"
    finalize_sized_base ${rawfile} ${BASE_DIR}/base/${basename}.qcow2
    rm -rf ${working}

    return 0
}
