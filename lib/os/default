# -*- mode: shell-script -*-

function valid_images() {
    _RETVAL=""
}


function get_mirror() {
    # $1 dist
    # $2 release

    _RETVAL="http://localhost"
}


function validate_image() {
    # $1 - distrelease
    # Warning, currently makes use of parent namespace

    image_name=${BASE_DIR}/minibase/${1}.tar.gz

    if [ -e ${image_name} ]; then
        log_debug "Image exists..."
        return 0
    fi
    return 1
}

function make_dist_image() {
    # make dist base image

    log_debug "Creating base image"
    mkdir ${tmpdir}/mountpoint

    get_mirror ${dist} ${release}
    local mirror=${_RETVAL}

    # FIXME: dist and release should be passed
    bootstrap $dist $release $mirror $tmpdir
    customize_rootfs ${tmpdir}/mountpoint

    log "building tarball"

    pushd ${tmpdir}/mountpoint
    tar -czvf ${image_name} *
    popd

    rm -rf ${tmpdir}
}

function customize_rootfs() {
    # $1 - path to mounted root to customize

    log "Customizing new root filesystem: $1"
    customize_keys $1
    customize_passwd $1

}
function customize_keys() {
    # throw in ssh keys
    # $1 - path to mounted root to customize

    if [ "${SSH_KEY-}" != "" ]; then
        log_debug "Installing ssh keys from ${SSH_KEY}"
        mkdir -p ${1}/root/.ssh
        chmod 700 ${1}/root/.ssh
        cat ${SSH_KEY} >> ${1}/root/.ssh/authorized_keys
        chmod 600 ${1}/root/.ssh/authorized_keys
    fi
}

function bootstrap() {
    # bootstrap debianish distros
    # $1 - dist
    # $2 - release
    # $3 - mirror
    # $4 - tmpdir
    local dist=$1
    local release=$2
    local mirror=$3
    local tmpdir=$4

    log "debootstrapping $dist-$release with mirror ${mirror}"
    debootstrap --include=openssh-server,avahi-daemon,libnss-mdns,sudo ${release} \
        ${tmpdir}/mountpoint ${mirror}
}

function customize_passwd() {
    # $1 - path to mounted root to customize
    # set root password

    if [ -x ${tmpdir}/mountpoint/usr/sbin/chpasswd ]; then
        if [ "${ROOT_PASSWORD-}" != "" ]; then
            chroot ${tmpdir}/mountpoint /bin/bash -c "echo root:${ROOT_PASSWORD} | /usr/sbin/chpasswd root"
        fi
    fi
}

function pre_grub() {
    # $1 - dist
    # $2 - release
    # $3 - mountpoint

    # here we would do anything we need to do before running grub.
    # this might include setting up package repositories, installing
    # initial distro-specific packages (beyond EXTRA_PACKAGES)
    true
}

function post_grub() {
    # $1 - dist
    # $2 - release
    # $3 - mountpoint

    # here we would do anything we need to do before running grub.
    # this might include setting up package repositories, installing
    # initial distro-specific packages (beyond EXTRA_PACKAGES)
    true
}

# we'll do debian and rhel here, can override in os specifics if necessary
function get_install_package_command() {
    # $1 dist
    # $2 release
    # $3 packagelist

    local dist=$1
    shift
    local release=$1
    shift
    local packagelist=$@

    local command

    case ${dist} in
        debian|ubuntu)
            command="DEBIAN_FRONTEND=noninteractive apt-get install ${packagelist} -y --force-yes"
            ;;
        redhat|centos|fedora)
            command="yum -y install ${packagelist}"
            ;;
        *)
            trap deinit ERR EXIT
            exit 1
    esac

    _RETVAL=${command}
}

function get_update_packagelist_command() {
    # $1 dist
    # $2 release

    local dist=$1
    local release=$2

    local command

    case ${dist} in
        debian|ubuntu)
            command="apt-get update -y --force-yes"
            ;;
        redhat|centos|fedora)
            command="true"
            ;;
        *)
            echo "unknown dist"
            return 1
    esac

    _RETVAL=${command}
}
